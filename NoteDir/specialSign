$_: means the last argument to the previous command. 

Example: 
echo "Foo" "bar"
Foo bar
echo $_
bar

$?: is used to find the return value of the last executed command. 

Example:
ls somefile
echo $?
0
return 0 means successful, none-zero is failed.


$#: stores the number of command-line arugments that were passed to the shell program

$0: stores the first word of the entered command (the name of the shell program)
$1: stores the 2nd word of the entered command ( normally, it's the 1st argument)

$*: stores all the arguments that were entered on the command line ($1 $2 ...)

$@: stores all the arguments that were entered on the command line, individually quoted ("$1" "$2" ...).

$$: means current PID of the shell instance

Example: 
ps -p $$

$!: is the PID of the last program your shell ran in the background (e.g. myprog &)


Heredoc sounds more convenient for this purpose and also good for writing multiple lines comments:

cat>test.sh <<EOF
#!/bin/bash

#line1
#line2
line3
EOF



File descriptor 1 is the standard output (stdout).
File descriptor 2 is the standard error (stderr).

Here is one way to remember this construct (although it is not entirely accurate): at first, 2>1 may look like a good way to redirect stderr to stdout. However, it will actually be interpreted as "redirect stderr to a file named 1". & indicates that what follows and precedes is a file descriptor and not a filename. So the construct becomes: 2>&1


Therefore >/dev/null 2>&1 redirects the output of your program to /dev/null. Include both the Standard Error and Standard Out
